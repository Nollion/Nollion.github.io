<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>7个实用的JavaScript技巧(译)</title>
      <link href="/2019/10/24/7-Useful-JavaScript-Tricks/"/>
      <url>/2019/10/24/7-Useful-JavaScript-Tricks/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>　　在社区看到分享，mark下。本文为自行理解下的译文。内容较简单，若有读者觉得翻译不好难以理解，可直接查看英文原文，或直接看代码部分。文章各一部分有拓展超链（暂未翻译），可点击查看相关内容。</p><div class="note no-icon">            <p>原文链接：<a href="https://davidwalsh.name/javascript-tricks" target="_blank" rel="noopener">7 Useful JavaScript Tricks</a></p>          </div><p>　　<strong><font color="red">以下为译文：</font></strong><br>　　和其他编程语言一样，<code>JavaScript</code>有着许多技巧来解决一些简单的、亦或是困难的任务。其中有大家所熟知的部分，但也有一些技巧可能超乎你的想象。现在让我们来看一下这七个你随即可用的 <code>JavaScript</code>小技巧！</p><h2 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h2><p>　　获取<a href="https://davidwalsh.name/array-unique" target="_blank" rel="noopener">数组的唯一值</a>可能比你想象中要简单：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> j = [...new <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>])]</span><br><span class="line">&gt;&gt; [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure><p>　　我喜欢<code>(…)</code>和<code>Set</code>！</p><h2 id="数组配合布尔"><a href="#数组配合布尔" class="headerlink" title="数组配合布尔"></a>数组配合布尔</h2><p>　　要从一个数组中<a href="https://davidwalsh.name/array-boolean" target="_blank" rel="noopener">过滤falsy值</a> (0, undefined, null, false, etc.)，你或许不知道有这种技巧：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">myArray</span><br><span class="line">    .map(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// ... </span></span><br><span class="line">        <span class="comment">// 记得 return</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 清除错误的值</span></span><br><span class="line">    .filter(<span class="built_in">Boolean</span>);</span><br></pre></td></tr></table></figure><p>　　只需传递 Boolean 就能去除这些 falsy 值！</p><h2 id="创建一个空的对象"><a href="#创建一个空的对象" class="headerlink" title="创建一个空的对象"></a>创建一个空的对象</h2><p>　　当然，你可以使用创建一个似乎为空的对象{}，但实际上这样创建的对象还是有<code>__proto__</code>和<code>hasOwnProperty</code>以及其他对象的方法。但是，有一种方法可以<a href="https://davidwalsh.name/object-create-null" target="_blank" rel="noopener">创建一个纯“字典”对象</a>的方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> dict = <span class="built_in">Object</span>.create(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// dict.__proto__ === "undefined"</span></span><br><span class="line"><span class="comment">// 不存在对象属性，除非添加它们</span></span><br></pre></td></tr></table></figure><p>　　这个对象上绝对没有你没有放入的键或方法！</p><h2 id="合并对象"><a href="#合并对象" class="headerlink" title="合并对象"></a>合并对象</h2><p>　　<code>JavaScript</code><a href="https://davidwalsh.name/merge-objects" target="_blank" rel="noopener">合并多个对象</a> 的需求一直存在，尤其是当我们创建带有选项的类和小部件时：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123; <span class="attr">name</span>: <span class="string">'David Walsh'</span>, <span class="attr">gender</span>: <span class="string">'Male'</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> tools = &#123; <span class="attr">computer</span>: <span class="string">'Mac'</span>, <span class="attr">editor</span>: <span class="string">'Atom'</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> attributes = &#123; <span class="attr">handsomeness</span>: <span class="string">'Extreme'</span>, <span class="attr">hair</span>: <span class="string">'Brown'</span>, <span class="attr">eyes</span>: <span class="string">'Blue'</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> summary = &#123;...person, ...tools, ...attributes&#125;;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Object &#123;</span></span><br><span class="line"><span class="comment">  "computer": "Mac",</span></span><br><span class="line"><span class="comment">  "editor": "Atom",</span></span><br><span class="line"><span class="comment">  "eyes": "Blue",</span></span><br><span class="line"><span class="comment">  "gender": "Male",</span></span><br><span class="line"><span class="comment">  "hair": "Brown",</span></span><br><span class="line"><span class="comment">  "handsomeness": "Extreme",</span></span><br><span class="line"><span class="comment">  "name": "David Walsh",</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>　　这三个点让任务变得简单多！</p><h2 id="需要函数传参"><a href="#需要函数传参" class="headerlink" title="需要函数传参"></a>需要函数传参</h2><p>　　能够为函数参数设置默认值是<code>JavaScript</code>的一个很棒的补充。但请查看这个技巧，<a href="https://davidwalsh.name/javascript-function-parameters" target="_blank" rel="noopener">要求为给定的参数传递值</a> :</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> isRequired = <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'param is required'</span>); &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> hello = <span class="function">(<span class="params">name = isRequired(</span>)) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">`hello <span class="subst">$&#123;name&#125;</span>`</span>) &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 由于没给 hello() 传 name，该代码会报错</span></span><br><span class="line">hello();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面代码也会报错</span></span><br><span class="line">hello(<span class="literal">undefined</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 来看看符合要求的写法</span></span><br><span class="line">hello(<span class="literal">null</span>);</span><br><span class="line">hello(<span class="string">'David'</span>);</span><br></pre></td></tr></table></figure><p>　　这是一些下一级的验证和<code>JavaScript</code>的用法！</p><h2 id="解构别名"><a href="#解构别名" class="headerlink" title="解构别名"></a>解构别名</h2><p>　　<a href="https://davidwalsh.name/destructuring-alias" target="_blank" rel="noopener">解构赋值</a>是一个非常受欢迎的<code>JavaScript</code>升级，但有时我们更喜欢用其他名称引用这些属性，所以我们可以利用别名：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">x</span>: <span class="number">1</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Grabs obj.x as &#123; x &#125;</span></span><br><span class="line"><span class="keyword">const</span> &#123; x &#125; = obj;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Grabs obj.x as &#123; otherName &#125;</span></span><br><span class="line"><span class="keyword">const</span> &#123; <span class="attr">x</span>: otherName &#125; = obj;</span><br></pre></td></tr></table></figure><p>　　有效避免了与现有变量的命名冲突！</p><h2 id="获取查询字符串参数"><a href="#获取查询字符串参数" class="headerlink" title="获取查询字符串参数"></a>获取查询字符串参数</h2><p>　　多年来，我们编写了大量正则表达式来获取查询字符串值，但那些日子已经一去不复返了——我们拥有了令人惊叹的 <a href="https://davidwalsh.name/query-string-javascript" target="_blank" rel="noopener">URLSearchParams</a> API:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 假设 "?post=1234&amp;action=edit"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> urlParams = <span class="keyword">new</span> URLSearchParams(<span class="built_in">window</span>.location.search);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(urlParams.has(<span class="string">'post'</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(urlParams.get(<span class="string">'action'</span>)); <span class="comment">// "edit"</span></span><br><span class="line"><span class="built_in">console</span>.log(urlParams.getAll(<span class="string">'action'</span>)); <span class="comment">// ["edit"]</span></span><br><span class="line"><span class="built_in">console</span>.log(urlParams.toString()); <span class="comment">// "?post=1234&amp;action=edit"</span></span><br><span class="line"><span class="built_in">console</span>.log(urlParams.append(<span class="string">'active'</span>, <span class="string">'1'</span>)); <span class="comment">// "?post=1234&amp;action=edit&amp;active=1"</span></span><br></pre></td></tr></table></figure><p>　　是不是比之前简单多了！</p><p>　　这些年<code>JavaScript</code>已经发生了很大的变化，但我最喜欢的部分是我们现在看到<code>JavaScript</code>语言改进的速度。尽管 JavaScript 在不断动态变化，我们仍然需要使用一些不错的技巧;把这些技巧放在你的工具箱里，以备不时之需！</p><p>　　你最喜欢的<code>JavaScript</code>技巧是什么呢？<br>　　<strong><font color="red">以下为译文：</font></strong></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>　　<code>(…)</code>确实挺好用，也比较常用，有实际的体验。其它的小技巧有类似的经历，例如创建空对象，进行原型链的继承，但用的比较少。加油吧~</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> tricks </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>理解JavaScript中的null与undefined</title>
      <link href="/2019/10/20/understanding-null-and-undefined/"/>
      <url>/2019/10/20/understanding-null-and-undefined/</url>
      
        <content type="html"><![CDATA[<h2 id="关于null"><a href="#关于null" class="headerlink" title="关于null"></a>关于null</h2><p>　　<code>null</code>值表示一个指向不存在或无效的对象或地址 (<a href="https://developer.mozilla.org/en-US/docs/Glossary/Null" target="_blank" rel="noopener">DMN</a>) 引用。即使它指向不存在的东西，它是一个全局对象(也是 JavaScript 的原始值之一)。<br>　　在浏览器中按<font color="black"> Ctrl+Shift+J (Windows / Linux) </font>或者<font color="black"> Cmd+Opt+J (Mac)</font>打开专用的 Console 面板，在控制台中键入 typeof null，返回 “object”：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">typeof</span> <span class="literal">null</span></span><br><span class="line">&lt; <span class="string">"object"</span></span><br></pre></td></tr></table></figure><p>　　否定<code>null</code>值返回<code>true</code>，但将其与<code>false</code>(或<code>true</code>)进行比较则会返回<code>false</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt; !<span class="literal">null</span></span><br><span class="line">&lt; <span class="literal">true</span></span><br><span class="line">&gt; <span class="literal">null</span> == flase</span><br><span class="line">&lt; <span class="literal">false</span></span><br><span class="line">&gt; <span class="literal">null</span> === flase</span><br><span class="line">&lt; <span class="literal">false</span></span><br><span class="line">&gt; <span class="literal">null</span> == <span class="literal">true</span></span><br><span class="line">&lt; <span class="literal">false</span></span><br><span class="line">&gt; <span class="literal">null</span> === <span class="literal">true</span></span><br><span class="line">&lt; <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>　　当进行基础的数学运算时，<code>null</code>值转换为<code>0</code>。甚至<code>null + null</code>也为<code>0</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="literal">null</span> + <span class="number">2</span></span><br><span class="line">&lt; <span class="number">5</span></span><br><span class="line">&gt; <span class="literal">null</span> - <span class="number">2</span></span><br><span class="line">&lt; <span class="number">-2</span></span><br><span class="line">&gt; <span class="literal">null</span> * <span class="number">2</span></span><br><span class="line">&lt; <span class="number">0</span></span><br><span class="line">&gt; <span class="literal">null</span> / <span class="number">2</span></span><br><span class="line">&lt; <span class="number">0</span></span><br><span class="line">&gt; <span class="literal">null</span> % <span class="number">2</span></span><br><span class="line">&lt; <span class="number">0</span></span><br><span class="line">&gt; <span class="literal">null</span> + <span class="literal">null</span></span><br><span class="line">&lt; <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="关于undefined"><a href="#关于undefined" class="headerlink" title="关于undefined"></a>关于undefined</h2><p>　　全局属性<code>undefined</code>表示原始值 <code>undefined</code>。它也是 JavaScript 的原始数据类型 (<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined" target="_blank" rel="noopener">MDN</a>)。<code>undefined</code>是全局作用域的一个变量。<code>undefined</code>的最初值就是原始数据类型<code>undefined</code>。一个没有被赋值的变量的类型是<code>undefined</code>。如果方法或者是语句中操作的变量没有被赋值，则会返回<code>undefined</code>。<br>　　在浏览器中按<font color="black"> Ctrl+Shift+J (Windows / Linux) </font>或者<font color="black"> Cmd+Opt+J (Mac)</font>打开专用的 Console 面板，在控制台中键入 typeof undefined，返回 “undefined”：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">typeof</span> <span class="literal">undefined</span></span><br><span class="line">&lt; <span class="string">"undefined"</span></span><br></pre></td></tr></table></figure><p>　　当声明一个变量但没有赋值时，JavaScript 会给它赋值为<code>undefined</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">var</span> a</span><br><span class="line">&lt; <span class="literal">undefined</span></span><br><span class="line">&gt; a</span><br><span class="line">&lt; <span class="literal">undefined</span></span><br></pre></td></tr></table></figure><p>　　与<code>null</code>相似，否定<code>undefined</code>值返回<code>true</code>，但将其与<code>true</code>或<code>false</code>作比较则返回<code>false</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt; !<span class="literal">undefined</span></span><br><span class="line">&lt; <span class="literal">true</span></span><br><span class="line">&gt; <span class="literal">undefined</span> == flase</span><br><span class="line">&lt; <span class="literal">false</span></span><br><span class="line">&gt; <span class="literal">undefined</span> === flase</span><br><span class="line">&lt; <span class="literal">false</span></span><br><span class="line">&gt; <span class="literal">undefined</span> == <span class="literal">true</span></span><br><span class="line">&lt; <span class="literal">false</span></span><br><span class="line">&gt; <span class="literal">undefined</span> === <span class="literal">true</span></span><br><span class="line">&lt; <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>　　且当在任何运算中使用<code>undefined</code>时，会返回<code>NaN</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="literal">undefined</span> + <span class="number">2</span></span><br><span class="line">&lt; <span class="literal">NaN</span></span><br><span class="line">&gt; <span class="literal">undefined</span> - <span class="number">2</span></span><br><span class="line">&lt; <span class="literal">NaN</span></span><br><span class="line">&gt; <span class="literal">undefined</span> * <span class="number">2</span></span><br><span class="line">&lt; <span class="literal">NaN</span></span><br><span class="line">&gt; <span class="literal">undefined</span> / <span class="number">2</span></span><br><span class="line">&lt; <span class="literal">NaN</span></span><br><span class="line">&gt; <span class="literal">undefined</span> % <span class="number">2</span></span><br><span class="line">&lt; <span class="literal">NaN</span></span><br><span class="line">&gt; <span class="literal">undefined</span> + <span class="literal">undefined</span></span><br><span class="line">&lt; <span class="literal">NaN</span></span><br></pre></td></tr></table></figure><h2 id="null-VS-undefined"><a href="#null-VS-undefined" class="headerlink" title="null VS undefined"></a>null VS undefined</h2><p>　　那么<code>null</code>与<code>undefined</code>两者之间有什么区别呢？通过上面的内容，我们来比较一下它们之间的相似点和不同之处。<br>　　<strong><font color="black">相似点：</font></strong><br>　　1. 当被否定时，两者的值都是<code>true</code>。<br>　　2. 代表一些不存在的东西。<br>　　<strong><font color="black">不同之处：</font></strong><br>　　1. <code>null</code>表示无，完全不存在；<code>undefined</code>表示没有定义<br>　　2. <code>undefined</code>有自己的数据类型( undefined )，<code>null</code>只是一个对象<br>　　3. 在基本算数运算汇总，<code>null</code>被当做<code>0</code>，<code>undefined</code>返回的是<code>NaN</code><br>　　需要注意的是<code>undefined == null</code>返回的值是<code>true</code> ，因为JavaScript会尽力将两者转为相同的类型。而<code>!undefined == !null</code>与<code>!undefined === !null</code>返回<code>true</code>，以及为何有开发者喜欢用<code>!null</code>进行逻辑判断也不难理解了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="literal">undefined</span> == <span class="literal">null</span></span><br><span class="line">&lt; <span class="literal">true</span></span><br><span class="line">&gt; <span class="literal">undefined</span> === <span class="literal">null</span></span><br><span class="line">&lt; <span class="literal">false</span></span><br><span class="line">&gt; !<span class="literal">undefined</span> == !<span class="literal">null</span></span><br><span class="line">&lt; <span class="literal">true</span></span><br><span class="line">&gt; !<span class="literal">undefined</span> === !<span class="literal">null</span></span><br><span class="line">&lt; <span class="literal">true</span></span><br><span class="line">&gt; <span class="keyword">typeof</span> <span class="literal">null</span></span><br><span class="line">&lt; <span class="string">"object"</span></span><br><span class="line">&gt; <span class="keyword">typeof</span> <span class="literal">undefined</span></span><br><span class="line">&lt; <span class="string">"undefined"</span></span><br><span class="line">&gt; <span class="keyword">typeof</span> !<span class="literal">null</span></span><br><span class="line">&lt; <span class="string">"boolean"</span></span><br><span class="line">&gt; <span class="keyword">typeof</span> !<span class="literal">undefined</span></span><br><span class="line">&lt; <span class="string">"boolean"</span></span><br><span class="line">&gt; !<span class="literal">null</span></span><br><span class="line">&lt; <span class="literal">true</span></span><br><span class="line">&gt; !<span class="literal">undefined</span></span><br><span class="line">&lt; <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>　　<code>null</code>表示无、不存在或无效的对象或地址引用。它在简单的数学运算中会转换为<code>0</code>，它是一个全局对象。<code>null == false</code>返回的值是<code>false</code>。<br>　　<code>undefined</code>是一个全局属性，原始值<code>undefined</code>。它表示有些东西没有赋值，未定义。<code>undefined</code> 不能转换成数字，因此在数学计算中使用它，返回的是<code>NaN</code>。<br>　　<strong><code>注：</code></strong> 编程规范中尽量用<code>void 0</code>代替 <code>undefined</code>。另外<code>NaN</code>表示一个不是数字的东西，尽管它实际上是一个数字(<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN" target="_blank" rel="noopener">MDN</a>)。它不等于本身，要检查是否有东西是<code>NaN</code>时，可借助 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/isNaN" target="_blank" rel="noopener">isNaN()</a> 函数。</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> null与undefined </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo小站搭建</title>
      <link href="/2019/10/14/hexo-build/"/>
      <url>/2019/10/14/hexo-build/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>　　其实平时自己并不怎么写文章，不过有看到一些东西会做笔记的习惯，但是每次写的东西都会到处放，不好找，所以想着自己搭建一个人博客网站。hexo比较平民化，并且能使用的主题也很多，所以就用它啦~<br>　　自己搭建完了也写一篇文章总结下，方便以后有需要看看。（.ps：本小站是在Windows系统下搭建）</p><h2 id="安装Git-Bash"><a href="#安装Git-Bash" class="headerlink" title="安装Git Bash"></a>安装Git Bash</h2><p>　　Windows：到git官网上下载，<a href="https://gitforwindows.org/" target="_blank" rel="noopener">Download git</a> (附链接)。<br>　　安装步骤：双击下载好的.exe文件，一直next就行了，安装完后会有一个Git Bash的命令行工具。<br>　　安装好后：打开Git Bash，键入命令 <font color="red">git –version</font> 来查看一下版本，用来确认是否安装成功。</p><h2 id="安装NodeJs"><a href="#安装NodeJs" class="headerlink" title="安装NodeJs"></a>安装NodeJs</h2><p>　　Windows：到Node.js官网上下载，<a href="https://nodejs.org/en/" target="_blank" rel="noopener">Download NodeJs</a> (附链接)。<br>　　安装步骤：双击下载好.msi文件，也是一路next就行了，最好在Custom Setup这一步选择 <font color="blue">Add to PATH</font> 。<br>　　安装完后：打开命令行，键入命令 <font color="red">node -v</font> 来查看一下版本，用来确认是否安装成功。</p><h2 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h2><p>　　前面Git和NodeJs安装好后，就可以安装hexo了。先创建一个文件夹blog，然后cd到这个文件夹下（或者在这个文件夹下直接右键Git Bash打开）。<br>　　键入命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>　　安装完成后：键入命令 <font color="red">hexo -v</font> 来查看一下版本，用来确认是否安装成功。</p><p>　　然后初始化hexo，键入命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><p>　　初始化完成后，打开所在的文件夹可以看到以下文件夹等：</p><div class="note no-icon">            <p>　　<em>node_modules: 依赖包<br>　　public：存放生成的页面<br>　　scaffolds：生成文章的一些模板<br>　　source：用来存放你的文章<br>　　themes：主题<br>　　config.yml: 博客的配置文件<br>　　db.json：source解析所得到的<br>　　package.json：项目所需模块项目的配置信息</em></p>          </div><p>　　此时，键入命令打开hexo服务就可以生成博客了。<br>　　输入命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>　　在浏览器输入localhost:4000就可以看到你生成的博客啦（如果没有也没关系，往下看就行了），可以使用crtl+c把服务关掉。(.ps：不过这只是在本地噢，要想生成线上的，还需要接下来的步骤。)</p><h2 id="生成SSH并添加到github"><a href="#生成SSH并添加到github" class="headerlink" title="生成SSH并添加到github"></a>生成SSH并添加到github</h2><p>　　首先，你先要有一个GitHub账户，没有的话去注册一个吧。注册完登录后，在github.com中鼠标移至『<strong>＋</strong>』看到一个New repository，新建仓库。<br>　　创建一个和你用户名相同的仓库，名称为yourname.github.io, 其中yourname是你的github名称。点击create repository后，回到git bash中，配置github账户信息（YourName和YourEail都替换成你自己的）。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name "yourname"</span><br><span class="line">git config --global user.email "youremail"</span><br></pre></td></tr></table></figure><p>　　怕自己输错的可以键入命令检查一下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config user.name</span><br><span class="line">git config user.email</span><br></pre></td></tr></table></figure><p>　　确认没错后，创建SSH，一路回车：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C "youremail"</span><br></pre></td></tr></table></figure><p>　　然后按输出的路径找到id_rsa.pub文件，一般在C:\Users\user(用户名).ssh目录下。用编辑器打开<strong><font color="red">rsa.pub</font></strong>文件，将里面的内容复制到github<strong><font color="red">设置</font></strong>中的<strong><font color="red">SSH and GPG keys</font></strong>。<br>　　添加一个 New SSH key ，title随便取，key就填刚刚那一段。<br>　　在git bash中验证是否添加成功：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><h2 id="部署项目并上传到github"><a href="#部署项目并上传到github" class="headerlink" title="部署项目并上传到github"></a>部署项目并上传到github</h2><p>　　打开你的blog项目，修改_config.yml站点文件的一些配置，YourgithubName就是你的GitHub账户(另外要注意冒号之后都是有一个半角空格的)：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">  repo:</span> <span class="attr">https://github.com/YourgithubName/YourgithubName.github.io.git</span></span><br><span class="line"><span class="attr">  branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>　　回到gitbash中，进入你的blog目录，安装deploy-git，也就是部署的命令,这样你才能用命令部署到GitHub。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>　　然后分别执行以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><div class="note no-icon">            <p>　　<em>hexo clean清除了你之前生成的东西，也可以不加。<br>　　hexo generate 顾名思义，生成静态文章，可以用 hexo g缩写<br>　　hexo deploy 部署文章，可以用hexo d缩写<br>　　注意deploy时可能要你输入username和password</em></p>          </div><p>　　在浏览器中输入 <em><a href="http://yourgithubname.github.io" target="_blank" rel="noopener">http://yourgithubname.github.io</a></em> 就可以看到你的个人博客啦，是不是很兴奋！<br>　　至此，小站就搭建完成啦，如果不想绑定个人域名的，可以自行跳到『<font color="black"><strong>修改及配置主题</strong></font>』，查看如何进行修改及配置主题。</p><h2 id="绑定个人域名"><a href="#绑定个人域名" class="headerlink" title="绑定个人域名"></a>绑定个人域名</h2><p>　　第一步，注册阿里云账户，在阿里云上买一个域名，各个后缀的价格不太一样，比如最广泛的.com就较贵。<br>　　第二步，添加CNAME，在项目的source文件夹下新建一个名为CNAME的文件，没有后缀名。在里面添加你购买的域名，比如我添加的是leedv.site，只能添加一个哦。(.ps：可以创建个.txt文件，键入内容后把后缀名删掉。)<br>　　第三步，在阿里云 <font color="red"><strong>域名控制台</strong></font>  中，找到你购买的域名。点 <font color="red"><strong>解析</strong></font> 进去，添加解析(两条)。</p><div class="note no-icon">            <p>　　<em>记录类型均为 <strong>A</strong><br>　　主机类型为 <strong>＠</strong> 以及 <strong>www</strong><br>　　解析线路为 <strong>默认</strong><br>　　记录值为 <strong>自己的博客 ip 地址</strong><br>　　(博客ip地址可通过ping命令获得，在cmd命令行中输入 ping yourgithubname.github.io 即可获得 ip 地址)</em></p>          </div><p>　　第四步，登录GitHub，进入之前创建的仓库，点击settings，设置 Custom domain ，输入你的域名 leedv.site 。<br>　　最后，在gitbash中，分别输入命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>　　部署完之后，打开浏览器，输入自己的域名，就可以看到搭建的网站博客啦！<br>　　至此，hexo小站搭建完成。</p><h2 id="安装-butterfly-主题"><a href="#安装-butterfly-主题" class="headerlink" title="安装 butterfly 主题"></a>安装 butterfly 主题</h2><p>　　hexo初始化之后默认的主题是landscape，当然，如果想要更换自己喜欢的主题，可以去<a href="https://hexo.io/themes/" target="_blank" rel="noopener">hexo官网</a>挑选，在github中搜索你要的主题名称，里面都会有该主题的如何使用的介绍，按着来就好了，反正就是改改改！我选的是 <font color="red"><strong>butterfly</strong></font> 。<br>　　在博客根目录安装主题</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/Butterfly</span><br></pre></td></tr></table></figure><p>　　安装渲染器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-jade hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure><p>　　修改hexo配置文件_config.yml，把主题改为Butterfly</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">Butterfly</span></span><br></pre></td></tr></table></figure><p>　　其余配置请参考主题的<a href="https://docs.jerryc.me/" target="_blank" rel="noopener">配置文档</a>(附链接)，里面很详细，不用担心！(.ps：文档中所说的butterfly.xml其实就是Butterfly文件中的_config.yml，大家放心去用吧 :) )</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>　　卡住了就让卡住吧，休息一会儿你会发现新大陆的。</p>]]></content>
      
      
      <categories>
          
          <category> 小站搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo小站 </tag>
            
            <tag> 小站搭建 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
